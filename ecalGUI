#!/usr/bin/env python3

"""
Usage:
  ecalGUI.py <file_name> [options]
  
  options:
      --fwhm_at_0=<fwhm0>       fwhm value at x=0
      --min_snr=<msnr>          min SNR
      --ref_x=<xref>            x reference for fwhm_ref
      --ref_fwhm=<ref_fwhm>     fwhm ref corresponding to x_ref
      --e_units=<e_units>       energy units that you will calibrate with
      --cebr                    detector type (cerium bromide)
      --labr                    detector type (lanthanum broide)
      --hpge                    detector type (HPGe)
      
  

Reads a csv file with only one column named "counts".
No need to have channels because they are automatically infered starting
from channel = 0.

If detector type is defined e.g. --cebr then the code guesses the x_ref and
fwhm_ref based on the known detector characteristics.

Note that the detector type input parameters must be changed depending on the 
particular electronic gain used. The examples here are for our specific
detector configurations.
"""
## run ecalGUI.py gui_test_data.csv --min_snr=3 --cebr

import docopt

if __name__ == "__main__":
    commands = docopt.docopt(__doc__)
print(commands)

file_name = commands["<file_name>"]
# The detector types below are accurate only for the example files.
# Add a similar command for your own detector or modify the values below.
if commands["--cebr"]:
    fwhm_at_0 = 1.0
    ref_x = 1317
    ref_fwhm = 41
elif commands["--labr"]:
    fwhm_at_0 = 1.0
    ref_x = 427
    ref_fwhm = 10
elif commands["--hpge"]:
    fwhm_at_0 = 0.1
    ref_x = 948
    ref_fwhm = 3
else:
    fwhm_at_0 = float(commands["--fwhm_at_0"])
    ref_x = float(commands["--ref_x"])
    ref_fwhm = float(commands["--ref_fwhm"])


if commands["--min_snr"] is None:
    min_snr = 1.0
else:
    min_snr = float(commands["--min_snr"])

if commands["--e_units"] is None:
    eunits = " "
else:
    eunits = commands["--e_units"]

# import the rest
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.widgets import SpanSelector, TextBox
from nasagamma import spectrum as sp
from nasagamma import peaksearch as ps
from nasagamma import peakfit as pf
from matplotlib.widgets import Button
from datetime import datetime

# read in csv file
df = pd.read_csv(file_name)

name_lst = ["counts", "cts", "data"]

if df.shape[1] != 1:
    print("ERROR: data file must have only one column named 'counts'")
else:
    e_units = "channels"
    col_lst = list(df.columns)
    cts_col = [s for s in col_lst if "counts" in s.lower()][0]
    spect = sp.Spectrum(counts=df[cts_col], e_units=e_units)
    x = spect.channels

# peaksearch class
search = ps.PeakSearch(spect, ref_x, ref_fwhm, fwhm_at_0, min_snr=min_snr)

## initialize figure
plt.rc("font", size=14)
plt.style.use("seaborn-darkgrid")
fig = plt.figure(constrained_layout=True, figsize=(17, 9))

gs = fig.add_gridspec(
    4, 4, width_ratios=[1, 0.33, 0.33, 0.33], height_ratios=[1, 0.15, 0.7, 0.15]
)

# axes
ax_s = fig.add_subplot(gs[0, 0])
ax_res = fig.add_subplot(gs[1, 0])
ax_fit = fig.add_subplot(gs[2:, 0])
ax_cal = fig.add_subplot(gs[0, 1:])
ax_b1 = fig.add_subplot(gs[1, 1])
ax_b2 = fig.add_subplot(gs[1, 2])
ax_b3 = fig.add_subplot(gs[1, 3])
ax_tab = fig.add_subplot(gs[2, 1:])
ax_b11 = fig.add_subplot(gs[3, 1])
ax_b22 = fig.add_subplot(gs[3, 2])
ax_b33 = fig.add_subplot(gs[3, 3])

ax_log = plt.axes([0.39, 0.85, 0.1, 0.05])
ax_add = plt.axes([0.39, 0.32, 0.1, 0.05])
ax_reset = plt.axes([0.89, 0.6, 0.1, 0.05])
ax_orig = plt.axes([0.89, 0.67, 0.1, 0.05])

# buttons
blin = Button(ax_b1, "linear", color="turquoise", hovercolor="lightgreen")
bquad = Button(ax_b2, "quadratic", color="turquoise", hovercolor="lightgreen")
bsave = Button(ax_b3, "save", color="silver", hovercolor="lightblue")
bpoly1 = Button(ax_b11, "poly1", color="yellow", hovercolor="lightgreen")
bpoly2 = Button(ax_b22, "poly2", color="yellow", hovercolor="lightgreen")
bexp = Button(ax_b33, "exp", color="yellow", hovercolor="lightgreen")
blog = Button(ax_log, "log-lin", color="yellow", hovercolor="lightgreen")
bpoly1.label.set_fontsize(16)
bpoly2.label.set_fontsize(16)
bexp.label.set_fontsize(16)
breset = Button(ax_reset, "RESET", color="C1", hovercolor="lightgreen")
borig = Button(ax_orig, "Origin YES/NO", color="C8", hovercolor="lightblue")

# textbox (add to calibration)
initial_e = " "
text_box = TextBox(ax_add, "Energy: ", initial=initial_e, color="lightblue")


# plot spectrum with peaksearch
scale = "log"
search.plot_peaks(yscale=scale, snrs="off", fig=fig, ax=ax_s)

# peak fit
ax_fit.set_xticks([])
ax_fit.set_yticks([])

# residual
ax_res.set_xticks([])
ax_res.set_yticks([])

# calibration
ax_cal.set_xticks([])
ax_cal.set_yticks([])

# table
ax_tab.set_xticks([])
ax_tab.set_yticks([])


list_xrange = []


def xSelect(xmin, xmax):
    global fit
    idxmin = round(xmin, 4)
    idxmax = round(xmax, 4)
    xrange = [idxmin, idxmax]
    list_xrange.append(xrange)
    print("xmin: ", idxmin)
    print("xmax: ", idxmax)
    ax_res.clear()
    ax_fit.clear()
    ax_tab.clear()
    fit = pf.PeakFit(search, xrange, bkg="poly1")
    # plot_fit(fit)
    fit.plot(
        plot_type="full",
        table_scale=[1, 1.8],
        legend="off",
        fig=fig,
        ax_res=ax_res,
        ax_fit=ax_fit,
        ax_tab=ax_tab,
    )
    fig.canvas.draw_idle()
    xspan.span_stays


# set useblit True on gtkagg for enhanced performance
xspan = SpanSelector(
    ax_s,
    xSelect,
    "horizontal",
    useblit=True,
    span_stays=True,
    rectprops=dict(alpha=0.3, facecolor="green"),
)


def click_button1(event):
    global fit
    fit = pf.PeakFit(search, list_xrange[-1], bkg="poly1")
    ax_res.clear()
    ax_fit.clear()
    ax_tab.clear()
    fit.plot(
        plot_type="full",
        table_scale=[1, 1.8],
        legend="off",
        fig=fig,
        ax_res=ax_res,
        ax_fit=ax_fit,
        ax_tab=ax_tab,
    )
    fig.canvas.draw_idle()


def click_button2(event):
    global fit
    fit = pf.PeakFit(search, list_xrange[-1], bkg="poly2")
    ax_res.clear()
    ax_fit.clear()
    ax_tab.clear()
    fit.plot(
        plot_type="full",
        table_scale=[1, 1.8],
        legend="off",
        fig=fig,
        ax_res=ax_res,
        ax_fit=ax_fit,
        ax_tab=ax_tab,
    )
    fig.canvas.draw_idle()


def click_button3(event):
    global fit
    fit = pf.PeakFit(search, list_xrange[-1], bkg="exponential")
    ax_res.clear()
    ax_fit.clear()
    ax_tab.clear()
    fit.plot(
        plot_type="full",
        table_scale=[1, 1.8],
        legend="off",
        fig=fig,
        ax_res=ax_res,
        ax_fit=ax_fit,
        ax_tab=ax_tab,
    )
    fig.canvas.draw_idle()


def click_log(event):
    global scale
    if scale == "log":
        ax_s.set_yscale("linear")
        scale = "linear"
    else:
        ax_s.set_yscale("log")
        scale = "log"
    fig.canvas.draw_idle()


mean_vals = [0]
e_vals = [0]
pred_erg = 0


def submit_e(text):
    global fit
    global pred_erg
    global mean_vals
    global e_vals
    ax_cal.clear()
    for d in fit.peak_info:
        keys = list(d)
        mean_ch = d[keys[0]]
        if mean_ch not in mean_vals:
            mean_vals.append(mean_ch)
    en = text.split(",")
    for i, e in enumerate(en):
        e2 = e.strip()  # remove white spaces
        if e2 == "_" or e2 == "-":
            mean_vals.pop(-i - 1)
        else:
            num = float(e2)
            if num not in e_vals:
                e_vals.append(num)

    print("ch: ", mean_vals)
    print("energies: ", e_vals)
    mean_vals.sort()
    e_vals.sort()
    pred_erg, efit = pf.ecalibration(
        mean_vals=mean_vals,
        erg=e_vals,
        channels=x,
        n=1,
        e_units=eunits,
        plot=True,
        residual=False,
        fig=fig,
        ax_fit=ax_cal,
    )

    fig.canvas.draw_idle()


def click_button4(event):
    global pred_erg
    global mean_vals
    global e_vals
    pred_erg = 0
    mean_vals = [0]
    e_vals = [0]
    ax_cal.clear()


def click_button5(event):
    global pred_erg
    global mean_vals
    global e_vals
    cts = df[cts_col]
    data = np.array((cts, pred_erg)).T
    cols = ["counts", f"energy_{eunits}"]
    df2 = pd.DataFrame(data=data, columns=cols)
    now = datetime.now()
    dt_string = now.strftime("%d-%m-%Y-%H-%M-%S")
    df2.to_csv(f"{dt_string}.csv", index=False)


def click_button6(event):
    global pred_erg
    global mean_vals
    global e_vals
    ax_cal.clear()
    pred_erg, efit = pf.ecalibration(
        mean_vals=mean_vals,
        erg=e_vals,
        channels=x,
        n=1,
        e_units=eunits,
        plot=True,
        residual=False,
        fig=fig,
        ax_fit=ax_cal,
    )
    fig.canvas.draw_idle()


def click_button7(event):
    global pred_erg
    global mean_vals
    global e_vals
    ax_cal.clear()
    pred_erg, efit = pf.ecalibration(
        mean_vals=mean_vals,
        erg=e_vals,
        channels=x,
        n=2,
        e_units=eunits,
        plot=True,
        residual=False,
        fig=fig,
        ax_fit=ax_cal,
    )
    fig.canvas.draw_idle()


def click_button8(event):
    global pred_erg
    global mean_vals
    global e_vals
    ax_cal.clear()
    if 0 in mean_vals:
        mean_vals.pop(0)
        e_vals.pop(0)
    else:
        mean_vals.insert(0, 0)
        e_vals.insert(0, 0)

    if len(mean_vals) > 1:
        pred_erg, efit = pf.ecalibration(
            mean_vals=mean_vals,
            erg=e_vals,
            channels=x,
            n=1,
            e_units=eunits,
            plot=True,
            residual=False,
            fig=fig,
            ax_fit=ax_cal,
        )
        fig.canvas.draw_idle()


bpoly1.on_clicked(click_button1)
bpoly2.on_clicked(click_button2)
bexp.on_clicked(click_button3)
blog.on_clicked(click_log)
text_box.on_submit(submit_e)
breset.on_clicked(click_button4)
bsave.on_clicked(click_button5)
blin.on_clicked(click_button6)
bquad.on_clicked(click_button7)
borig.on_clicked(click_button8)
plt.ioff()
plt.show()
